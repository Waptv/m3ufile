<meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/shaka-player/4.6.0/shaka-player.ui.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/shaka-player/4.6.0/controls.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons+Sharp">
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    html, body {
      background: #000;
      height: 100%;
      width: 100%;
      overflow: hidden;
      font-family: system-ui, -apple-system, sans-serif;
    }
    .shaka-video-container {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
    }
    video {
      width: 100%;
      height: 100%;
      background: #000;
      object-fit: contain;
    }
  



    /* YouTube Theme CSS */
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 400;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Me5Q.ttf) format('truetype');
    }
    @font-face {
      font-family: 'Roboto';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/roboto/v27/KFOlCnqEu92Fr1MmEU9vAw.ttf) format('truetype');
    }
    .youtube-theme {
      font-family: 'Roboto', sans-serif;
    }
    .youtube-theme .shaka-bottom-controls {
      width: 100%;
      padding: 0;
      padding-bottom: 0;
      z-index: 1;
    }
    .youtube-theme .shaka-bottom-controls {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
          -ms-flex-direction: column;
              flex-direction: column;
    }
    .youtube-theme .shaka-ad-controls {
      -webkit-box-ordinal-group: 2;
          -ms-flex-order: 1;
              order: 1;
    }
    .youtube-theme .shaka-controls-button-panel {
      -webkit-box-ordinal-group: 3;
          -ms-flex-order: 2;
              order: 2;
      height: 50px;
      padding: 0 10px;
    }
    .youtube-theme .shaka-range-container {
      margin: 4px 10px 4px 10px;
      top: 0;
    }
    .youtube-theme .shaka-small-play-button {
      -webkit-box-ordinal-group: -2;
          -ms-flex-order: -3;
              order: -3;
    }
    .youtube-theme .shaka-mute-button {
      -webkit-box-ordinal-group: -1;
          -ms-flex-order: -2;
              order: -2;
    }
    .youtube-theme .shaka-controls-button-panel > * {
      margin: 0;
      padding: 3px 8px;
      color: #EEE;
      height: 40px;
    }
    .youtube-theme .shaka-controls-button-panel > *:focus {
      outline: none;
      -webkit-box-shadow: inset 0 0 0 2px rgba(27, 127, 204, 0.8);
              box-shadow: inset 0 0 0 2px rgba(27, 127, 204, 0.8);
      color: #FFF;
    }
    .youtube-theme .shaka-controls-button-panel > *:hover {
      color: #FFF;
    }
    .youtube-theme .shaka-controls-button-panel .shaka-volume-bar-container {
      position: relative;
      z-index: 10;
      left: -1px;
      -webkit-box-ordinal-group: 0;
          -ms-flex-order: -1;
              order: -1;
      opacity: 0;
      width: 0px;
      -webkit-transition: width 0.2s cubic-bezier(0.4, 0, 1, 1);
      height: 3px;
      transition: width 0.2s cubic-bezier(0.4, 0, 1, 1);
      padding: 0;
    }
    .youtube-theme .shaka-controls-button-panel .shaka-volume-bar-container:hover,
    .youtube-theme .shaka-controls-button-panel .shaka-volume-bar-container:focus {
      display: block;
      width: 50px;
      opacity: 1;
      padding: 0 6px;
    }
    .youtube-theme .shaka-mute-button:hover + div {
      opacity: 1;
      width: 50px;
      padding: 0 6px;
    }
    .youtube-theme .shaka-current-time {
      padding: 0 10px;
      font-size: 12px;
    }
    .youtube-theme .shaka-seek-bar-container {
      height: 3px;
      position: relative;
      top: -1px;
      border-radius: 0;
      margin-bottom: 0;
    }
    .youtube-theme .shaka-seek-bar-container .shaka-range-element {
      opacity: 0;
    }
    .youtube-theme .shaka-seek-bar-container:hover {
      height: 5px;
      top: 0;
      cursor: pointer;
    }
    .youtube-theme .shaka-seek-bar-container:hover .shaka-range-element {
      opacity: 1;
      cursor: pointer;
    }
    .youtube-theme .shaka-seek-bar-container input[type=range]::-webkit-slider-thumb {
      background: #FF0000;
      cursor: pointer;
    }
    .youtube-theme .shaka-seek-bar-container input[type=range]::-moz-range-thumb {
      background: #FF0000;
      cursor: pointer;
    }
    .youtube-theme .shaka-seek-bar-container input[type=range]::-ms-thumb {
      background: #FF0000;
      cursor: pointer;
    }
    .youtube-theme .shaka-video-container * {
      font-family: 'Roboto', sans-serif;
    }
    .youtube-theme .shaka-video-container .material-icons-round {
      font-family: 'Material Icons Sharp';
    }
    .youtube-theme .shaka-overflow-menu,
    .youtube-theme .shaka-settings-menu {
      border-radius: 2px;
      background: rgba(28, 28, 28, 0.9);
      text-shadow: 0 0 2px rgb(0 0 0%);
      -webkit-transition: opacity 0.1s cubic-bezier(0, 0, 0.2, 1);
      transition: opacity 0.1s cubic-bezier(0, 0, 0.2, 1);
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-user-select: none;
      right: 10px;
      bottom: 50px;
      padding: 8px 0;
      min-width: 200px;
    }
    .youtube-theme .shaka-settings-menu {
      padding: 0 0 8px 0;
    }
    .youtube-theme .shaka-settings-menu button {
      font-size: 12px;
    }
    .youtube-theme .shaka-settings-menu button span {
      margin-left: 33px;
      font-size: 13px;
    }
    .youtube-theme .shaka-settings-menu button[aria-selected="true"] {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
    }
    .youtube-theme .shaka-settings-menu button[aria-selected="true"] span {
      -webkit-box-ordinal-group: 3;
          -ms-flex-order: 2;
              order: 2;
      margin-left: 0;
    }
    .youtube-theme .shaka-settings-menu button[aria-selected="true"] i {
      -webkit-box-ordinal-group: 2;
          -ms-flex-order: 1;
              order: 1;
      font-size: 18px;
      padding-left: 5px;
    }
    .youtube-theme .shaka-overflow-menu button {
      padding: 0;
    }
    .youtube-theme .shaka-overflow-menu button i {
      display: none;
    }
    .youtube-theme .shaka-overflow-menu button .shaka-overflow-button-label {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: justify;
          -ms-flex-pack: justify;
              justify-content: space-between;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      cursor: default;
      outline: none;
      height: 40px;
      -webkit-box-flex: 0;
          -ms-flex: 0 0 100%;
              flex: 0 0 100%;
    }
    .youtube-theme .shaka-overflow-menu button .shaka-overflow-button-label span {
      -ms-flex-negative: initial;
          flex-shrink: initial;
      padding-left: 15px;
      font-size: 13px;
      font-weight: 500;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
    }
    .youtube-theme .shaka-overflow-menu span + span {
      color: #FFF;
      font-weight: 400 !important;
      font-size: 12px !important;
      padding-right: 8px;
      padding-left: 0 !important;
    }
    .youtube-theme .shaka-overflow-menu span + span:after {
      content: "navigate_next";
      font-family: 'Material Icons Sharp';
      font-size: 20px;
    }
    .youtube-theme .shaka-overflow-menu .shaka-pip-button span + span {
      padding-right: 15px !important;
    }
    .youtube-theme .shaka-overflow-menu .shaka-pip-button span + span:after {
      content: "";
    }
    .youtube-theme .shaka-back-to-overflow-button {
      padding: 8px 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      font-size: 12px;
      color: #eee;
      height: 40px;
    }
    .youtube-theme .shaka-back-to-overflow-button .material-icons-round {
      font-size: 15px;
      padding-right: 10px;
    }
    .youtube-theme .shaka-back-to-overflow-button span {
      margin-left: 3px !important;
    }
    .youtube-theme .shaka-overflow-menu button:hover,
    .youtube-theme .shaka-settings-menu button:hover {
      background-color: rgba(255, 255, 255, 0.1);
      cursor: pointer;
    }
    .youtube-theme .shaka-overflow-menu button:hover label,
    .youtube-theme .shaka-settings-menu button:hover label {
      cursor: pointer;
    }
    .youtube-theme .shaka-overflow-menu button:focus,
    .youtube-theme .shaka-settings-menu button:focus {
      background-color: rgba(255, 255, 255, 0.1);
      border: none;
      outline: none;
    }
    .youtube-theme .shaka-overflow-menu button,
    .youtube-theme .shaka-settings-menu button {
      color: #EEE;
    }
    .youtube-theme .shaka-captions-off {
      color: #BFBFBF;
    }
    .youtube-theme .shaka-overflow-menu-button {
      font-size: 18px;
      margin-right: 5px;
    }
    .youtube-theme .shaka-fullscreen-button:hover {
      font-size: 25px;
      -webkit-transition: font-size 0.1s cubic-bezier(0, 0, 0.2, 1);
      transition: font-size 0.1s cubic-bezier(0, 0, 0.2, 1);
    }

    /* Hide center loading spinner */
    .shaka-spinner-container,
    .shaka-spinner,
    .shaka-spinner-svg {
      display: none !important;
      visibility: hidden !important;
      opacity: 0 !important;
    }

    /* Custom Seek Bar Colors */
    .youtube-theme .shaka-seek-bar {
      background: rgba(255,255,255,.2) !important;
    }
    
    .youtube-theme .shaka-buffered-range {
      background: rgba(255,255,255,.4) !important;
    }
    
    .youtube-theme .shaka-played-range {
      background: rgb(255,0,0) !important;
    }

    </style>  
</head>
        
        <div class="shaka-video-container youtube-theme"  data-shaka-player>
  <video id="video" autoplay muted playsinline preload="auto" src=""></video>
  
</div>

  
        





   



<script>  

function getUrlParam(name) {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); 
            var r = window.location.search.substr(1).match(reg);
            if (r != null) return unescape(r[2]);
            return null; 
        }

        var url = getUrlParam('id');




        let neonActive = true;  
        let player;  
        let sharedHdnea = ''; // Variable to store the cookie from M3U

        // Initialize Shaka Player  
        async function initPlayer() {  
            shaka.polyfill.installAll();  
            if (!shaka.Player.isBrowserSupported()) {  
                console.error('Browser not supported');  
                return;  
            }  

            const video = document.getElementById('video');  
            player = new shaka.Player(video);  
            const ui = new shaka.ui.Overlay(player, document.querySelector('[data-shaka-player-container]'), video);  
            
const config = {
    'seekBarColors': {
      base: 'rgba(255,255,255,.2)',
      buffered: 'rgba(255,255,255,.4)',
      played: 'rgb(255,0,0)',
    },
    'controlPanelElements': [
      'play_pause',
      
      'mute',
      'time_and_duration',
       'restart', 
      'spacer',
      'quality',
        'language',

      'picture_in_picture',
      'fullscreen',

      'overflow_menu'
    ]
  };

ui.configure(config);
  const controls = ui.getControls();
            player.configure({  
                drm: {  
                    clearKeys: {} // Will be set per channel in playChannel  
                },  
                streaming: {  
                    bufferingGoal: 10,  
                    rebufferingGoal: 2,  
                    bufferBehind: 15,  
                    retryParameters: {  
                        timeout: 15000,  
                        maxAttempts: 5,  
                        baseDelay: 500,  
                        backoffFactor: 1.2  
                    },  
                    segmentRequestTimeout: 8000,  
                    useNativeHlsOnSafari: true,  
                    lowLatencyMode: true,  
                    jumpLargeGaps: true,  
                    inaccurateManifestTolerance: 0.5  
                },  
                manifest: {  
                    retryParameters: {  
                        timeout: 10000,  
                        maxAttempts: 3  
                    }  
                }  
            });  

            
                    
                    
            player.getNetworkingEngine().registerRequestFilter((type, request) => {  
                request.headers['Referer'] = 'https://www.jiotv.com/';  
                request.headers['User-Agent'] = "plaYtv/7.1.5 (Linux;Android 13) ExoPlayerLib/2.11.6";  
                // Cookie is set per channel in playChannel  
            });  

            player.addEventListener('error', (event) => {  
                console.error('Shaka Player Error:', event.detail);  
            });  

            video.addEventListener('play', () => {  
                if (!document.fullscreenElement) {  
                    document.querySelector('[data-shaka-player-container]').requestFullscreen().catch(() => {});  
                }  
            }, { once: true });  
        }  

        // Toggle neon effect  
        function toggleNeon() {  
            const video = document.getElementById('video');  
            const toggleButton = document.getElementById('neon-toggle');  

            if (neonActive) {  
                video.style.boxShadow = 'none';  
                toggleButton.classList.remove('active');  
            } else {  
                video.style.boxShadow = '0 0 15px var(--neon-color, #00f), 0 0 30px var(--neon-color, #00f), 0 0 45px var(--neon-color, #f0f), 0 0 60px var(--neon-color, #f0f)';  
                toggleButton.classList.add('active');  
            }  
            neonActive = !neonActive;  

            if (navigator.vibrate) {  
                navigator.vibrate(100);  
            }  
        }  

            
        // Fetch and parse M3U  
        async function fetchM3U() {  
            try {  
                const response = await fetch('https://raw.githubusercontent.com/abusaeeidx/Ayna-Playlists-free-Version/refs/heads/main/playlist.m3u');  
                       
                const m3uText = await response.text();  
                return parseM3U(m3uText);  
            } catch (error) {  
                console.error('Error fetching M3U:', error);  
                return [];  
            }  
        }  

        function parseM3U(m3uText) {  
            const lines = m3uText.split('\n').map(line => line.trim());  
            const channels = [];  
            let currentChannel = null;  

            for (const line of lines) {  
                if (line.startsWith('#EXTM3U')) {  
                    continue;  
                } else if (line.startsWith('#EXTINF:')) {  
                    currentChannel = {};  
                    const match = line.match(/tvg-id="([^"]+)"\s+group-title="([^"]+)"\s+tvg-logo="([^"]+)"\s*,(.+)/);    
                   if (match) {  
                        currentChannel.id = match[1];  
                        currentChannel.logo = match[3];  
                    }  
                } else if (line.startsWith('#KODIPROP:inputstream.adaptive.license_key=')) {  
                    const keyMatch = line.match(/license_key=([^:]+):(.+)/);  
                    if (keyMatch && currentChannel) {  
                        currentChannel.mod = keyMatch[1];  
                        currentChannel.key = keyMatch[2];  
                    }  
                } else if (line.startsWith('#EXTVLCOPT:http-user-agent=')) {  
                    if (currentChannel) {  
                        currentChannel.userAgent = line.replace('#EXTVLCOPT:http-user-agent=', '');  
                    }  
                } else if (line.startsWith('#EXTHTTP:')) {  
                    const httpMatch = line.match(/"cookie":"__hdnea__=(.+)"/);  
                    if (httpMatch && currentChannel) {  
                        currentChannel.hdnea = httpMatch[1];  
                        sharedHdnea = httpMatch[1]; // Store the cookie for custom channels  
                    }  
                } else if (line && !line.startsWith('#') && currentChannel) {  
                    currentChannel.url = line;  
                    channels.push(currentChannel);  
                    currentChannel = null;  
                }  
            }  
            return channels;  
        }  

        // Define custom channels  
        const customChannels = [];  

        // Load channels into grid  
        async function loadChannels() {  
            

            const m3uChannels = await fetchM3U();  
            // Update custom channels with the fetched cookie  
            customChannels.forEach(channel => {  
                channel.hdnea = sharedHdnea;  
            });  
            // Combine M3U channels with custom channels (M3U first, then custom)  
            const channels = [...m3uChannels, ...customChannels];  
            
            const channelList = document.getElementById('channel-list');  

            if (channels.length === 0) {  
                channelList.innerHTML = '<div>No channels found.</div>';  
                return;  
            } 

            
            
            
                
                    const initialChannel = channels[url];  

            playChannel(initialChannel);  

            
        }  

        // Play selected channel  
        async function playChannel(channel) {  
            if (!player) await initPlayer();  

            player.configure({  
                drm: {  
                    clearKeys: {  
                        [channel.mod]: channel.key  
                    }  
                }  
            });  

            player.getNetworkingEngine().clearAllRequestFilters();  
            player.getNetworkingEngine().registerRequestFilter((type, request) => {  
                request.headers['Referer'] = 'https://www.jiotv.com/';  
                request.headers['User-Agent'] = channel.userAgent || "plaYtv/7.1.5 (Linux;Android 13) ExoPlayerLib/2.11.6";  
                request.headers['Cookie'] = `__hdnea__=${channel.hdnea || ''}`;  

                if ((type === shaka.net.NetworkingEngine.RequestType.MANIFEST ||   
                     type === shaka.net.NetworkingEngine.RequestType.SEGMENT) &&   
                    request.uris[0].indexOf('__hdnea__=') === -1) {  
                    const separator = request.uris[0].includes('?') ? '&' : '?';  
                    request.uris[0] += separator + `__hdnea__=${channel.hdnea || ''}`;  
                }  
            });  

            try {  
const video = document.getElementById('video');  
                player.load(channel.url);  
                
                const playVideo = async () => {  
                    try {
                        // First attempt: Try unmuted autoplay  
                        video.muted = false;  
                        await video.play();  
                        console.log('Unmuted autoplay successful');  
                    } catch (playError) {  
                        console.log('Unmuted autoplay failed, trying muted play:', playError);  
                        // Fallback to muted autoplay  
                        video.muted = true;  
                        await video.play();  
                        console.log('Muted autoplay successful');  
                        // Attempt to unmute after muted success if allowed  
                        try {  
                            video.muted = false;  
                            await video.play();  
                            console.log('Unmuted after muted successful');  
                        } catch (unmuteError) {  
                            console.log('Unmute after muted failed, requires user interaction:', unmuteError);  
                        }  
                    }  
                };  
                if (video.readyState >= 3) await playVideo();  
                else video.addEventListener('canplay', playVideo, { once: true });  
            } catch (error) {  
                console.error('Load error:', error);  
            }  
        }  

        

        window.onload = async () => {  
        await loadChannels();  
        };  
    </script>
