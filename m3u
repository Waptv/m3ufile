<head>  
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  

  

  
    
         
    

<style>
a:link, a:visited {
  
  color: white;
  

  text-align: center;
  text-decoration: none;
  display: inline-block;
}

a:hover, a:active {
  color: black;
}
    :root {
      --bg-color: #000;
      --text-color: #fff;
      --category-bg: #222;
      --category-active: #4CAF50;
    }

    body {
      margin: 0;
      background: var(--bg-color);
      color: var(--text-color);
      font-family: sans-serif;
      overflow-x: hidden;
    }







    .category-bar {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      padding: 10px;
      background: var(--category-bg);
      align-items: center;
    }

    .category-bar button {
      background: var(--category-bg);
      color: white;
      border: none;
      padding: 8px 14px;
      border-radius: 20px;
      cursor: pointer;
    }

    .category-bar button.active {
      background: var(--category-active);
    }

    .dark-toggle {
      margin-left: auto;
      padding: 8px 14px;
      border-radius: 20px;
      background: #444;
      color: white;
      border: none;
      cursor: pointer;
    }

    .channel-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 5px;
      padding: 5px;
    }

    .channel {
      background: #111;
      text-align: center;
      padding: 10px;
      border-radius: 10px;
      cursor: pointer;
    }

    .channel img {
      width: 50px;
      height: 50px;
      object-fit: contain;
      border-radius: 5px;
    }

    .channel p {
      margin: 5px 0 0;
      color: red;
      font-size: 14px;
    }
  </style>
</head>
        
        
        
        
        
            <div class="channel-grid"  id="channel-list"></div>
       




    </div>



<script>  
        let neonActive = true;  
        let player;  
        let sharedHdnea = ''; 

            
        // Fetch and parse M3U  
        async function fetchM3U() {  
            try {  
                const response = await fetch('https://raw.githubusercontent.com/alex4528/m3u/main/jstar.m3u');  
                       
                const m3uText = await response.text();  
                return parseM3U(m3uText);  
            } catch (error) {  
                console.error('Error fetching M3U:', error);  
                return [];  
            }  
        }  

        function parseM3U(m3uText) {  
            const lines = m3uText.split('\n').map(line => line.trim());  
            const channels = [];  
            let currentChannel = null;  

            for (const line of lines) {  
                if (line.startsWith('#EXTM3U')) {  
                    continue;  
                } else if (line.startsWith('#EXTINF:')) {  
                    currentChannel = {};  
                    const match = line.match(/tvg-id="([^"]+)"\s+group-title="([^"]+)"\s+tvg-logo="([^"]+)"\s*,(.+)/);    
                   if (match) {  
                        currentChannel.name = match[4];  
                        currentChannel.logo = match[3];  
                    }  
                } else if (line.startsWith('#KODIPROP:inputstream.adaptive.license_key=')) {  
                    const keyMatch = line.match(/license_key=([^:]+):(.+)/);  
                    if (keyMatch && currentChannel) {  
                        currentChannel.mod = keyMatch[1];  
                        currentChannel.key = keyMatch[2];  
                    }  
                } else if (line.startsWith('#EXTVLCOPT:http-user-agent=')) {  
                    if (currentChannel) {  
                        currentChannel.userAgent = line.replace('#EXTVLCOPT:http-user-agent=', '');  
                    }  
                } else if (line.startsWith('#EXTHTTP:')) {  
                    const httpMatch = line.match(/"cookie":"__hdnea__=(.+)"/);  
                    if (httpMatch && currentChannel) {  
                        currentChannel.hdnea = httpMatch[1];  
                        sharedHdnea = httpMatch[1]; // Store the cookie for custom channels  
                    }  
                } else if (line && !line.startsWith('#') && currentChannel) {  
                    currentChannel.url = line;  
                    channels.push(currentChannel);  
                    currentChannel = null;  
                }  
            }  
            return channels;  
        }  

        // Define custom channels  
        const customChannels = [];  

        // Load channels into grid  
        async function loadChannels() {  
            

            const m3uChannels = await fetchM3U();  
            // Update custom channels with the fetched cookie  
            customChannels.forEach(channel => {  
                channel.hdnea = sharedHdnea;  
            });  
            // Combine M3U channels with custom channels (M3U first, then custom)  
            const channels = [...m3uChannels, ...customChannels];  
            
            const channelList = document.getElementById('channel-list');  

            if (channels.length === 0) {  
                channelList.innerHTML = '<div>No channels found.</div>';  
                return;  
            } 

            
            channels.forEach(ch => {
                const tile = document.createElement('div');  
                tile.className='channel';  

tile.dataset.category = ch.category;


tile.innerHTML = `<a href="https://tv4wap.github.io/p8?url=${ch.url}"><img src="${ch.logo}" alt="ch.name"><p>${ch.name}</p></a>`;
       
tile.onclick = () => switchChannel(ch.url);


                
                channelList.appendChild(tile);  
            });  
        }  

        

            

                

            
                

        

        loadChannels();  
        
    </script>
